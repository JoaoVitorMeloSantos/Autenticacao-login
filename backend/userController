const userModel = require('./model');
const bcrypt = require('bcrypt');

async function listUsers() {
  return await userModel.findAll();
}

async function createUser(user) {
  // Gerar o hash da senha antes de criar o usuário
  user.password = await bcrypt.hash(user.password, 10);
  return await userModel.create(user);
}

async function deleteUser(id) {
  const user = await userModel.findOne({ where: { id } });

  if (!user) {
    throw new Error('Usuário não encontrado.');
  }

  await user.destroy();
  return 'Usuário deletado com sucesso.';
}

async function getUser(id) {
  return await userModel.findOne({ where: { id } });
}

async function updateUser(id, userAlterado) {
  try {
    const user = await userModel.findByPk(id);

    if (!user) {
      throw new Error('Usuário não encontrado.');
    }

    // Atualize apenas os campos fornecidos em userAlterado
    await user.update(userAlterado);

    return 'Usuário atualizado com sucesso.';
  } catch (err) {
    console.log('Erro na atualização do usuário', err);
    throw new Error('Erro na atualização do usuário.');
  }
}

async function authenticateUser({ username, password }) {
  const user = await userModel.findOne({ where: { username } });

  if (!user || !(await bcrypt.compare(password, user.password))) {
    throw new Error('Usuário ou senha inválidos');
  }

  return user;
}

module.exports = {
  listUsers,
  createUser,
  getUser,
  deleteUser,
  updateUser,
  authenticateUser,
};